/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PublicLayoutImport } from './routes/_public/layout'
import { Route as ProtectedLayoutImport } from './routes/_protected/layout'
import { Route as IndexImport } from './routes/index'
import { Route as PublicRegisterImport } from './routes/_public/register'
import { Route as PublicLoginImport } from './routes/_public/login'
import { Route as errors503Import } from './routes/(errors)/503'
import { Route as errors500Import } from './routes/(errors)/500'
import { Route as errors404Import } from './routes/(errors)/404'
import { Route as errors403Import } from './routes/(errors)/403'
import { Route as errors401Import } from './routes/(errors)/401'
import { Route as ProtectedTweetsIndexImport } from './routes/_protected/tweets/index'
import { Route as ProtectedTweetsTweetidIndexImport } from './routes/_protected/tweets/$tweetid/index'

// Create/Update Routes

const PublicLayoutRoute = PublicLayoutImport.update({
  id: '/_public',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedLayoutRoute = ProtectedLayoutImport.update({
  id: '/_protected',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PublicRegisterRoute = PublicRegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => PublicLayoutRoute,
} as any)

const PublicLoginRoute = PublicLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => PublicLayoutRoute,
} as any)

const errors503Route = errors503Import.update({
  id: '/(errors)/503',
  path: '/503',
  getParentRoute: () => rootRoute,
} as any)

const errors500Route = errors500Import.update({
  id: '/(errors)/500',
  path: '/500',
  getParentRoute: () => rootRoute,
} as any)

const errors404Route = errors404Import.update({
  id: '/(errors)/404',
  path: '/404',
  getParentRoute: () => rootRoute,
} as any)

const errors403Route = errors403Import.update({
  id: '/(errors)/403',
  path: '/403',
  getParentRoute: () => rootRoute,
} as any)

const errors401Route = errors401Import.update({
  id: '/(errors)/401',
  path: '/401',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedTweetsIndexRoute = ProtectedTweetsIndexImport.update({
  id: '/tweets/',
  path: '/tweets/',
  getParentRoute: () => ProtectedLayoutRoute,
} as any)

const ProtectedTweetsTweetidIndexRoute =
  ProtectedTweetsTweetidIndexImport.update({
    id: '/tweets/$tweetid/',
    path: '/tweets/$tweetid/',
    getParentRoute: () => ProtectedLayoutRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedLayoutImport
      parentRoute: typeof rootRoute
    }
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicLayoutImport
      parentRoute: typeof rootRoute
    }
    '/(errors)/401': {
      id: '/(errors)/401'
      path: '/401'
      fullPath: '/401'
      preLoaderRoute: typeof errors401Import
      parentRoute: typeof rootRoute
    }
    '/(errors)/403': {
      id: '/(errors)/403'
      path: '/403'
      fullPath: '/403'
      preLoaderRoute: typeof errors403Import
      parentRoute: typeof rootRoute
    }
    '/(errors)/404': {
      id: '/(errors)/404'
      path: '/404'
      fullPath: '/404'
      preLoaderRoute: typeof errors404Import
      parentRoute: typeof rootRoute
    }
    '/(errors)/500': {
      id: '/(errors)/500'
      path: '/500'
      fullPath: '/500'
      preLoaderRoute: typeof errors500Import
      parentRoute: typeof rootRoute
    }
    '/(errors)/503': {
      id: '/(errors)/503'
      path: '/503'
      fullPath: '/503'
      preLoaderRoute: typeof errors503Import
      parentRoute: typeof rootRoute
    }
    '/_public/login': {
      id: '/_public/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof PublicLoginImport
      parentRoute: typeof PublicLayoutImport
    }
    '/_public/register': {
      id: '/_public/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof PublicRegisterImport
      parentRoute: typeof PublicLayoutImport
    }
    '/_protected/tweets/': {
      id: '/_protected/tweets/'
      path: '/tweets'
      fullPath: '/tweets'
      preLoaderRoute: typeof ProtectedTweetsIndexImport
      parentRoute: typeof ProtectedLayoutImport
    }
    '/_protected/tweets/$tweetid/': {
      id: '/_protected/tweets/$tweetid/'
      path: '/tweets/$tweetid'
      fullPath: '/tweets/$tweetid'
      preLoaderRoute: typeof ProtectedTweetsTweetidIndexImport
      parentRoute: typeof ProtectedLayoutImport
    }
  }
}

// Create and export the route tree

interface ProtectedLayoutRouteChildren {
  ProtectedTweetsIndexRoute: typeof ProtectedTweetsIndexRoute
  ProtectedTweetsTweetidIndexRoute: typeof ProtectedTweetsTweetidIndexRoute
}

const ProtectedLayoutRouteChildren: ProtectedLayoutRouteChildren = {
  ProtectedTweetsIndexRoute: ProtectedTweetsIndexRoute,
  ProtectedTweetsTweetidIndexRoute: ProtectedTweetsTweetidIndexRoute,
}

const ProtectedLayoutRouteWithChildren = ProtectedLayoutRoute._addFileChildren(
  ProtectedLayoutRouteChildren,
)

interface PublicLayoutRouteChildren {
  PublicLoginRoute: typeof PublicLoginRoute
  PublicRegisterRoute: typeof PublicRegisterRoute
}

const PublicLayoutRouteChildren: PublicLayoutRouteChildren = {
  PublicLoginRoute: PublicLoginRoute,
  PublicRegisterRoute: PublicRegisterRoute,
}

const PublicLayoutRouteWithChildren = PublicLayoutRoute._addFileChildren(
  PublicLayoutRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof PublicLayoutRouteWithChildren
  '/401': typeof errors401Route
  '/403': typeof errors403Route
  '/404': typeof errors404Route
  '/500': typeof errors500Route
  '/503': typeof errors503Route
  '/login': typeof PublicLoginRoute
  '/register': typeof PublicRegisterRoute
  '/tweets': typeof ProtectedTweetsIndexRoute
  '/tweets/$tweetid': typeof ProtectedTweetsTweetidIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof PublicLayoutRouteWithChildren
  '/401': typeof errors401Route
  '/403': typeof errors403Route
  '/404': typeof errors404Route
  '/500': typeof errors500Route
  '/503': typeof errors503Route
  '/login': typeof PublicLoginRoute
  '/register': typeof PublicRegisterRoute
  '/tweets': typeof ProtectedTweetsIndexRoute
  '/tweets/$tweetid': typeof ProtectedTweetsTweetidIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_protected': typeof ProtectedLayoutRouteWithChildren
  '/_public': typeof PublicLayoutRouteWithChildren
  '/(errors)/401': typeof errors401Route
  '/(errors)/403': typeof errors403Route
  '/(errors)/404': typeof errors404Route
  '/(errors)/500': typeof errors500Route
  '/(errors)/503': typeof errors503Route
  '/_public/login': typeof PublicLoginRoute
  '/_public/register': typeof PublicRegisterRoute
  '/_protected/tweets/': typeof ProtectedTweetsIndexRoute
  '/_protected/tweets/$tweetid/': typeof ProtectedTweetsTweetidIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/401'
    | '/403'
    | '/404'
    | '/500'
    | '/503'
    | '/login'
    | '/register'
    | '/tweets'
    | '/tweets/$tweetid'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/401'
    | '/403'
    | '/404'
    | '/500'
    | '/503'
    | '/login'
    | '/register'
    | '/tweets'
    | '/tweets/$tweetid'
  id:
    | '__root__'
    | '/'
    | '/_protected'
    | '/_public'
    | '/(errors)/401'
    | '/(errors)/403'
    | '/(errors)/404'
    | '/(errors)/500'
    | '/(errors)/503'
    | '/_public/login'
    | '/_public/register'
    | '/_protected/tweets/'
    | '/_protected/tweets/$tweetid/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProtectedLayoutRoute: typeof ProtectedLayoutRouteWithChildren
  PublicLayoutRoute: typeof PublicLayoutRouteWithChildren
  errors401Route: typeof errors401Route
  errors403Route: typeof errors403Route
  errors404Route: typeof errors404Route
  errors500Route: typeof errors500Route
  errors503Route: typeof errors503Route
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProtectedLayoutRoute: ProtectedLayoutRouteWithChildren,
  PublicLayoutRoute: PublicLayoutRouteWithChildren,
  errors401Route: errors401Route,
  errors403Route: errors403Route,
  errors404Route: errors404Route,
  errors500Route: errors500Route,
  errors503Route: errors503Route,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_protected",
        "/_public",
        "/(errors)/401",
        "/(errors)/403",
        "/(errors)/404",
        "/(errors)/500",
        "/(errors)/503"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_protected": {
      "filePath": "_protected/layout.tsx",
      "children": [
        "/_protected/tweets/",
        "/_protected/tweets/$tweetid/"
      ]
    },
    "/_public": {
      "filePath": "_public/layout.tsx",
      "children": [
        "/_public/login",
        "/_public/register"
      ]
    },
    "/(errors)/401": {
      "filePath": "(errors)/401.tsx"
    },
    "/(errors)/403": {
      "filePath": "(errors)/403.tsx"
    },
    "/(errors)/404": {
      "filePath": "(errors)/404.tsx"
    },
    "/(errors)/500": {
      "filePath": "(errors)/500.tsx"
    },
    "/(errors)/503": {
      "filePath": "(errors)/503.tsx"
    },
    "/_public/login": {
      "filePath": "_public/login.tsx",
      "parent": "/_public"
    },
    "/_public/register": {
      "filePath": "_public/register.tsx",
      "parent": "/_public"
    },
    "/_protected/tweets/": {
      "filePath": "_protected/tweets/index.tsx",
      "parent": "/_protected"
    },
    "/_protected/tweets/$tweetid/": {
      "filePath": "_protected/tweets/$tweetid/index.tsx",
      "parent": "/_protected"
    }
  }
}
ROUTE_MANIFEST_END */
